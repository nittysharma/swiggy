# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Docker Push Images to Docker Hub

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: docker login1
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build the Docker Image for Config Service
        run: docker build . --file config-service/Dockerfile --build-arg JAR_FILE=config-service/target/*.jar --tag gaccount4m/swiggy-config-service:latest

      - name: Docker Push Config
        run: docker push gaccount4m/swiggy-config-service

      - name: Swiggy-Config Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: swiggy-config-service
          IMAGE_TAG: swiggy-config-service
        run: |
          docker build . --file config-service/Dockerfile --build-arg JAR_FILE=config-service/target/*.jar --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Build the Docker Image for eureka Service
        run: docker build . --file eureka/Dockerfile --build-arg JAR_FILE=eureka/target/*.jar --tag gaccount4m/swiggy-eureka-service:latest

      - name: Docker Push Eureka
        run: docker push gaccount4m/swiggy-eureka-service

      - name: Swiggy-Eureka Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: swiggy-eureka-service
          IMAGE_TAG: swiggy-eureka-service
        run: |
          docker build . --file eureka/Dockerfile --build-arg JAR_FILE=eureka/target/*.jar --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Build the Docker Image for menu Service
        run: docker build . --file menu/Dockerfile --build-arg JAR_FILE=menu/target/*.jar --tag gaccount4m/swiggy-menu-service:latest

      - name: Docker Push Menu
        run: docker push gaccount4m/swiggy-menu-service

      - name: Swiggy-Menu Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: swiggy-menu-service
          IMAGE_TAG: swiggy-menu-service
        run: |
          docker build . --file menu/Dockerfile --build-arg JAR_FILE=menu/target/*.jar --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Build the Docker Image for restaurant Service
        run: docker build . --file restaurant/Dockerfile --build-arg JAR_FILE=restaurant/target/*.jar --tag gaccount4m/swiggy-restaurant-service:latest

      - name: Docker Push Restaurant
        run: docker push gaccount4m/swiggy-restaurant-service

      - name: Swiggy-Restaurant Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: swiggy-restaurant-service
          IMAGE_TAG: swiggy-restaurant-service
        run: |
          docker build . --file restaurant/Dockerfile --build-arg JAR_FILE=restaurant/target/*.jar --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build the Docker Image for Customer Service
        run: docker build . --file customer/Dockerfile --build-arg JAR_FILE=customer/target/*.jar --tag gaccount4m/swiggy-customer-service:latest

      - name: Docker Push Customer
        run: docker push gaccount4m/swiggy-customer-service

      - name: Swiggy-Customer Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: swiggy-customer-service
          IMAGE_TAG: swiggy-customer-service
        run: |
          docker build . --file customer/Dockerfile --build-arg JAR_FILE=customer/target/*.jar --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Build the Docker Image for Order Service
        run: docker build . --file order/Dockerfile --build-arg JAR_FILE=order/target/*.jar --tag gaccount4m/swiggy-order-service:latest

      - name: Docker Push Order
        run: docker push gaccount4m/swiggy-order-service

      - name: Swiggy-Order Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: swiggy-order-service
          IMAGE_TAG: swiggy-order-service
        run: |
          docker build . --file order/Dockerfile --build-arg JAR_FILE=order/target/*.jar --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build the Docker Image for Invoice Service
        run: docker build . --file invoice/Dockerfile --build-arg JAR_FILE=invoice/target/*.jar --tag gaccount4m/swiggy-invoice-service:latest

      - name: Docker Push Invoice
        run: docker push gaccount4m/swiggy-invoice-service

      - name: Swiggy-Invoice Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: swiggy-invoice-service
          IMAGE_TAG: swiggy-invoice-service
        run: |
          docker build . --file invoice/Dockerfile --build-arg JAR_FILE=invoice/target/*.jar --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG